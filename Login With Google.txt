Login With Google

1Ô∏è‚É£ Front-end g·ªçi API c·ªßa Google ƒë·ªÉ l·∫•y id_token
·ªû ph√≠a front-end (React, Angular, Vue...), b·∫°n c√≥ th·ªÉ d√πng th∆∞ vi·ªán OAuth c·ªßa Google.

üìå C√†i ƒë·∫∑t th∆∞ vi·ªán Google OAuth (React)
	npm install @react-oauth/google

üìå Vi·∫øt code ƒëƒÉng nh·∫≠p b·∫±ng Google
	import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";

	const Login = () => {
    		return (
        		<GoogleOAuthProvider clientId="YOUR_GOOGLE_CLIENT_ID">
            			<GoogleLogin
                			onSuccess={(response) => {
                    				console.log("Google Response:", response);
                    				fetch("https://your-api.com/api/auth/google", {
                        				method: "POST",
                        				headers: { "Content-Type": "application/json" },
                        				body: JSON.stringify({ token: response.credential }),
                    				})
                    				.then(res => res.json())
                    				.then(data => {
                        				localStorage.setItem("token", data.token);
                        				alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
                    				})
                    				.catch(err => console.error("L·ªói:", err));
                			}}
                			onError={() => console.log("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")}
            			/>
        		</GoogleOAuthProvider>
    		);
	};

	export default Login;

2Ô∏è‚É£ Back-end x√°c th·ª±c id_token t·ª´ Google
Back-end s·∫Ω nh·∫≠n id_token, x√°c th·ª±c v·ªõi Google, sau ƒë√≥ t·∫°o JWT Token ƒë·ªÉ tr·∫£ v·ªÅ.

üìå C√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt trong ASP.NET
	dotnet add package Google.Apis.Auth
	dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer

üìå Th√™m c·∫•u h√¨nh Google v√†o appsettings.json
	"GoogleAuth": {
    		"ClientId": "YOUR_GOOGLE_CLIENT_ID"
	},
	"Jwt": {
    		"Key": "YOUR_SECRET_KEY",
    		"Issuer": "your-api.com"
	}

3Ô∏è‚É£ X√¢y d·ª±ng API /api/auth/google ƒë·ªÉ x√°c th·ª±c v√† t·∫°o JWT
API n√†y s·∫Ω:
	X√°c th·ª±c id_token v·ªõi Google.
	Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi.
	T·∫°o JWT Token v√† g·ª≠i v·ªÅ front-end.

üìå Vi·∫øt API ƒëƒÉng nh·∫≠p v·ªõi Google
	using Google.Apis.Auth;
	using Microsoft.AspNetCore.Mvc;
	using Microsoft.IdentityModel.Tokens;
	using System.IdentityModel.Tokens.Jwt;
	using System.Security.Claims;
	using System.Text;

	[Route("api/auth")]
	[ApiController]
	public class AuthController : ControllerBase
	{
    		private readonly IConfiguration _config;
    		private readonly IUserService _userService;

    		public AuthController(IConfiguration config, IUserService userService)
    		{	
        		_config = config;
        		_userService = userService;
    		}

    		[HttpPost("google")]
    		public async Task<IActionResult> GoogleLogin([FromBody] GoogleLoginRequest request)
    		{
        		try
        		{
            			// üü¢ X√°c th·ª±c token t·ª´ Google
            			var payload = await GoogleJsonWebSignature.ValidateAsync(request.Token, new GoogleJsonWebSignature.ValidationSettings
            				{
                				Audience = new[] { _config["GoogleAuth:ClientId"] }
            				});

            			if (payload == null)
                				return Unauthorized("Token kh√¥ng h·ª£p l·ªá!");

            			// üü¢ Ki·ªÉm tra user trong database
            			var user = await _userService.GetUserByEmailAsync(payload.Email);
            			if (user == null)
            			{
                			user = await _userService.CreateUserAsync(new User
                			{
                    				Email = payload.Email,
                    				Name = payload.Name,
                    				Role = "User"
                			});
            			}

            			// üü¢ T·∫°o JWT Token
            			var token = GenerateJwtToken(user);
            			return Ok(new { token });
        		}
        		catch (Exception ex)
        		{
            			return BadRequest($"L·ªói x√°c th·ª±c Google: {ex.Message}");
        		}
    		}

    		private string GenerateJwtToken(User user)
    		{
        		var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
        		var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        		var claims = new[]
        		{
            			new Claim(JwtRegisteredClaimNames.Sub, user.Email),
            			new Claim(JwtRegisteredClaimNames.Name, user,
	    			new Claim(JwtRegisteredClaimNames.Name, user.Name),
            			new Claim(ClaimTypes.Role, user.Role),
            			new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
       	 		};

        		var token = new JwtSecurityToken(
            			issuer: _config["Jwt:Issuer"],
            			audience: _config["Jwt:Issuer"],
            			claims: claims,
            			expires: DateTime.UtcNow.AddHours(3), // Token h·∫øt h·∫°n sau 3 ti·∫øng
            			signingCredentials: creds
        		);

        		return new JwtSecurityTokenHandler().WriteToken(token);
    		}
	}

	public class GoogleLoginRequest
	{
    		public string Token { get; set; }
	}

4Ô∏è‚É£ C·∫•u h√¨nh x√°c th·ª±c JWT trong Program.cs
ƒê·ªÉ b·∫£o v·ªá API b·∫±ng JWT, c·∫ßn c·∫•u h√¨nh AddAuthentication() v√† AddJwtBearer().

üìå Th√™m middleware x√°c th·ª±c JWT
	using Microsoft.AspNetCore.Authentication.JwtBearer;
	using Microsoft.IdentityModel.Tokens;
	using System.Text;

	var builder = WebApplication.CreateBuilder(args);

	builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    		.AddJwtBearer(options =>
    		{
        		options.TokenValidationParameters = new TokenValidationParameters
        		{
            			ValidateIssuer = true,
            			ValidateAudience = true,
            			ValidateLifetime = true,
            			ValidateIssuerSigningKey = true,
            			ValidIssuer = builder.Configuration["Jwt:Issuer"],
           			ValidAudience = builder.Configuration["Jwt:Issuer"],
           			 IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        		};
    		});

	builder.Services.AddAuthorization();

5Ô∏è‚É£ S·ª≠ d·ª•ng JWT Token ƒë·ªÉ g·ªçi API b·∫£o m·∫≠t
Sau khi nh·∫≠n JWT Token t·ª´ API /api/auth/google, front-end l∆∞u v√†o localStorage ho·∫∑c cookies, r·ªìi d√πng token n√†y ƒë·ªÉ g·ªçi API.

üìå Front-end g·ª≠i token trong header
	fetch("https://your-api.com/api/user/profile", {
    		method: "GET",
    		headers: {
        		"Authorization": `Bearer ${localStorage.getItem("token")}`
    		}
	})
	.then(res => res.json())
	.then(data => console.log("User Info:", data))
	.catch(err => console.error("L·ªói:", err));

6Ô∏è‚É£ B·∫£o v·ªá API b·∫±ng [Authorize]
B√¢y gi·ªù, m·ªçi API c·∫ßn x√°c th·ª±c s·∫Ω y√™u c·∫ßu JWT Token.

	using Microsoft.AspNetCore.Authorization;
	using Microsoft.AspNetCore.Mvc;

	[Route("api/user")]
	[ApiController]
	public class UserController : ControllerBase
	{
    		[HttpGet("profile")]
    		[Authorize] // Ch·∫∑n truy c·∫≠p n·∫øu kh√¥ng c√≥ token h·ª£p l·ªá
    		public IActionResult GetUserProfile()
    		{
        		var email = User.FindFirst(ClaimTypes.Email)?.Value;
        		var name = User.FindFirst(ClaimTypes.Name)?.Value;
        		var role = User.FindFirst(ClaimTypes.Role)?.Value;

        		return Ok(new { email, name, role });
    		}
	}

7Ô∏è‚É£ K·∫øt qu·∫£ mong ƒë·ª£i
‚úî Ng∆∞·ªùi d√πng b·∫•m "ƒêƒÉng nh·∫≠p v·ªõi Google" tr√™n front-end ‚Üí Nh·∫≠n id_token
‚úî G·ª≠i id_token v·ªÅ back-end ‚Üí Ki·ªÉm tra v·ªõi Google
‚úî T·∫°o ho·∫∑c l·∫•y user trong database
‚úî T·∫°o JWT Token v√† g·ª≠i v·ªÅ front-end
‚úî Front-end l∆∞u token, g·ª≠i k√®m token khi g·ªçi API
‚úî Back-end ki·ªÉm tra JWT, tr·∫£ v·ªÅ d·ªØ li·ªáu






